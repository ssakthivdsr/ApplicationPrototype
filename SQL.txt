CREATE SCHEMA assessment;
//CREATE USER tcs with PASSWORD 'password';
//GRANT ALL PRIVILEGES ON DATABASE 'assessment' to tcs;
CREATE SEQUENCE assessment.line_of_business_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.function_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.user_type_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.lob_function_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.transaction_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.department_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.application_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.application_lob_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.application_function_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.business_partner_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.application_transaction_details_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.application_user_details_sequence;
CREATE SEQUENCE assessment.application_additional_details_questions_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.application_additional_details_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.regulatory_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.application_life_cycle_questions_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.application_life_cycle_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.service_management_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.service_management_questions_sequence START 1 INCREMENT 1;
CREATE SEQUENCE assessment.vendor_package_sequence START 1 INCREMENT 1;
-----------------------------------------------------------------------

CREATE TABLE assessment.line_of_business(
    id integer DEFAULT nextval('assessment.line_of_business_sequence'),
    lob VARCHAR(200) UNIQUE NOT NULL,
        PRIMARY KEY(id)
);

CREATE TABLE assessment.function(
    id integer DEFAULT nextval('assessment.function_sequence'),
    name VARCHAR(200) NOT NULL,
        PRIMARY KEY(id)
);
CREATE TABLE assessment.user_type(
    id integer DEFAULT nextval('assessment.user_type_sequence'),
    type VARCHAR(200) NOT NULL,
        PRIMARY KEY(id)
);
CREATE TABLE assessment.lob_function(
    id integer DEFAULT nextval('assessment.lob_function_sequence'),
    lob_id integer,
    function_id VARCHAR(200) NOT NULL,
        PRIMARY KEY(id),
        CONSTRAINT fk_lob_id FOREIGN KEY(lob_id) REFERENCES assessment.line_of_business(id)
);
CREATE TABLE assessment.transaction(
    id integer DEFAULT nextval('assessment.transaction_sequence'),
    function_id integer,
    type VARCHAR(200) NOT NULL,
        PRIMARY KEY(id),
        CONSTRAINT fk_function_id FOREIGN KEY(function_id) REFERENCES assessment.function(id)
);

CREATE TABLE assessment.department (
    id integer DEFAULT nextval('assessment.department_sequence'),
        name VARCHAR(200) UNIQUE NOT NULL,
        owner VARCHAR(200) NOT NULL,
    PRIMARY KEY(id)
);

//CREATE TABLE assessment.application (
//    id integer DEFAULT nextval('assessment.application_sequence'),
//        name VARCHAR(200) UNIQUE NOT NULL,
//        dept_id integer,
//        component_manager VARCHAR(200),
//        sme VARCHAR(200),
//        primary_tech_sme VARCHAR(200),
//        primary_ba VARCHAR(200),
//        PRIMARY KEY(id),
//    CONSTRAINT fk_dept_id FOREIGN KEY(dept_id) REFERENCES assessment.department(id)     
//);

CREATE TABLE assessment.application (
    id integer DEFAULT nextval('assessment.application_sequence'),
        name VARCHAR(200) UNIQUE NOT NULL,
        descr VARCHAR(200),
        dept_id integer,
        lob VARCHAR(200),
        func VARCHAR(200),
        component_manager VARCHAR(200),
        sme VARCHAR(200),
        primary_tech_sme VARCHAR(200),
        primary_ba VARCHAR(200),
        PRIMARY KEY(id),
    CONSTRAINT fk_dept_id FOREIGN KEY(dept_id) REFERENCES assessment.department(id)     
);
CREATE TABLE assessment.application_lob (
    id integer DEFAULT nextval('assessment.application_lob_sequence'),
        application_id integer,
        lob_id integer,
        PRIMARY KEY(id),
    CONSTRAINT fk_app_lob_app_id FOREIGN KEY(application_id) REFERENCES assessment.application(id),
        CONSTRAINT fk_app_lob_lob_id FOREIGN KEY(lob_id) REFERENCES assessment.line_of_business(id)    
);


CREATE TABLE assessment.application_function (
    id integer DEFAULT nextval('assessment.application_function_sequence'),
        application_id integer,
        function_id integer,
        PRIMARY KEY(id),
    CONSTRAINT fk_app_function_app_id FOREIGN KEY(application_id) REFERENCES assessment.application(id),
        CONSTRAINT fk_app_function_function_id FOREIGN KEY(function_id) REFERENCES assessment.function(id) 
);

CREATE TABLE assessment.business_partner (
    id integer DEFAULT nextval('assessment.business_partner_sequence'),
        application_id integer,
        primary_business_partner VARCHAR(200),
    secondary_business_partner VARCHAR(200),
        managers VARCHAR(500),
        directors VARCHAR(500), 
        PRIMARY KEY(id),
    CONSTRAINT fk_business_partner_app_id FOREIGN KEY(application_id) REFERENCES assessment.application(id)
);
CREATE TABLE assessment.application_transaction_details (
    id integer DEFAULT nextval('assessment.application_transaction_details_sequence'),
        application_id integer,
        transaction_type VARCHAR(200),
    volume JSON, 
        PRIMARY KEY(id),
    CONSTRAINT fk_application_transaction_app_id FOREIGN KEY(application_id) REFERENCES assessment.application(id)
);


CREATE TABLE assessment.application_user_details (
    id integer DEFAULT nextval('assessment.application_user_details_sequence'),
        application_id integer,
        user_type VARCHAR(200),
    volume JSON, 
        PRIMARY KEY(id),
    CONSTRAINT fk_application_user_app_id FOREIGN KEY(application_id) REFERENCES assessment.application(id)
);


CREATE TABLE assessment.application_additional_details_questions (
    id integer DEFAULT nextval('assessment.application_additional_details_questions_sequence'),
        question VARCHAR(600),
        PRIMARY KEY(id)
);

CREATE TABLE assessment.application_additional_details (
    id integer DEFAULT nextval('assessment.application_additional_details_sequence'),
        application_id integer,
        question_id integer,
        answer VARCHAR(600),
        PRIMARY KEY(id),
    CONSTRAINT fk_application_additional_app_id FOREIGN KEY(application_id) REFERENCES assessment.application(id),
        CONSTRAINT fk_application_additional_question_id FOREIGN KEY(question_id) REFERENCES assessment.application_additional_details_questions(id)
);

----------------------------------------------------------------------------------------------
CREATE TABLE assessment.regulatory_details (
    id integer DEFAULT nextval('assessment.regulatory_sequence'),
        application_id integer,
        regulatory_value VARCHAR(600),
        PRIMARY KEY(id),
    CONSTRAINT fk_application_regulatory_app_id FOREIGN KEY(application_id) REFERENCES assessment.application(id),
);



CREATE TABLE assessment.application_life_cycle_questions (
    id integer DEFAULT nextval('assessment.application_additional_details_questions_sequence'),
        question VARCHAR(600),
        PRIMARY KEY(id)
);

CREATE TABLE assessment.application_life_cycle (
    id integer DEFAULT nextval('assessment.application_life_cycle_sequence'),
        application_id integer,
        question_id integer,
        answer VARCHAR(600),
        PRIMARY KEY(id),
    CONSTRAINT fk_application_app_life_cycle_app_id FOREIGN KEY(application_id) REFERENCES assessment.application(id),
        CONSTRAINT fk_application_app_life_cycle_app_id_question_id FOREIGN KEY(question_id) REFERENCES assessment.application_life_cycle_questions(id)
);

CREATE TABLE assessment.service_management_questions (
    id integer DEFAULT nextval('assessment.service_management_questions_sequence'),
        question VARCHAR(600),
        PRIMARY KEY(id)
);

CREATE TABLE assessment.service_management (
    id integer DEFAULT nextval('assessment.service_management_sequence'),
        application_id integer,
        question_id integer,
        answer VARCHAR(600),
        PRIMARY KEY(id),
    CONSTRAINT fk_application_service_management_app_id FOREIGN KEY(application_id) REFERENCES assessment.application(id),
        //CONSTRAINT fk_application_service_management_app_id_question_id FOREIGN KEY(question_id) REFERENCES assessment.application_life_cycle_questions(id)
		CONSTRAINT fk_application_service_management_app_id_question_id FOREIGN KEY(question_id) REFERENCES assessment.service_management_questions(id)
);



CREATE TABLE assessment.vendor_package_details (
    id integer DEFAULT nextval('assessment.vendor_package_sequence'),
        application_id integer,
	eng_associated_managed_services VARCHAR(500),
	package_type VARCHAR(100),
	name VARCHAR(500),
	eng_associated_with_vendor_package VARCHAR(500),
	degree_of_customization VARCHAR(300),
	hosted_location VARCHAR(300),
	hosted_name VARCHAR(300),
	eng_associated_with_esternally_hosted_vendor VARCHAR(500),
	is_latest_sw_version boolean,
	package_version VARCHAR(100),
	frequency_of_updates VARCHAR(100),
	frequency_of_patches VARCHAR(100),
        PRIMARY KEY(id),
    CONSTRAINT fk_application_vendor_package_app_id FOREIGN KEY(application_id) REFERENCES assessment.application(id)
);

------------------------------------------------

INSERT INTO assessment.service_management_questions(
id, question)
 VALUES ('1','Age of code?'),
 ('2','Number of Change Requests?'),
 ('3','Number of Checkouts?'),
 ('4','Movement of code into production?'),
 ('5','Business impact?'),
 ('6','Number of unplanned Outages?'),
 ('7','Ratio of Actual Planned Outages vs Total Planned Outages?'),
 ('8','Number of Problems?'),
 ('9','Number of Service Requests for active enhancmenet?'),
 ('10','Number of Service Requests for closed enhancement'),
 ('11','Number of Service Requests for active research?'),
 ('12','Number of Service Requests for closed research?'),
 ('13','Number of Proactive Incidents for the last 1 year?'),
 ('14','Number of Reactive Incidents for the last 1 year?'),
 ('15','Breakup of Reactive Incidents Resolved at Level 1?'),
 ('16','Breakup of Reactive Incidents Resolved at Level 2?'),
 ('17','Breakup of Reactive Incidents Resolved at Level 3?'),
 ('18','Breakup of Proactive Incidents Resolved at Level 1?'),
 ('19','Breakup of Proactive Incidents Resolved at Level 2?'),
 ('20','Breakup of Proactive Incidents Resolved at Level 3?'),
 ('21','Percentage of Proactive Incidents automatically resolved?'),
 ('22','Percentage of Proactive Incidents automatically suppressed?'),
 ('23','Percentage of Reactive incidents that have a reference to Knowledge Items?'),
 ('24','Percentage of Proactive incidents that have a reference to Knowledge Items?'),
 ('25','Number of Level "Critical Priority - Reactive Incident Requests?'),
 ('26','Number of Level "High" Priority - Reactive Incident Requests active ?'),
 ('27','Number of Level "High" Priority - Reactive Incident Requests closed?'),
 ('28','Number of Level "Average" Priority - Reactive Incident Requests active?'),
 ('29','Number of Level "Average" Priority - Reactive Incident Requests closed?'),
 ('30','Number of Level "Low" Priority - Reactive Incident Requests active?'),
 ('31','Number of Level "Low" Priority - Reactive Incident Requests closed?'),
 ('32','Percentage of Sev 1 Reactive incidents that breached SLAs?'),
 ('33','Percentage of Sev 2 Reactive incidents that breached SLAs?'),
 ('34','Percentage of Sev 3 Reactive incidents that breached SLAs?'),
 ('35','Percentage of Sev 1 Proactive incidents that breached SLAs?'),
 ('36','Percentage of Sev 2 Proactive incidents that breached SLAs?'),
 ('37','Percentage of Sev 3 Proactive incidents that breached SLAs?'),
 ('38','Ratio of Actual Application Availability vs Planned Application Availability?'),
 ('39','Recovery Time Objective(RTO) in Hours?'),
 ('40','Recovery Point Objective(RPO) in Hours?'),
 ('41','Support Window?'),
 ('42','Maintanence documents?'),
 ('43','State of Jurisdiction?'),
 ('44','Governing Support Service?'),
 ('45','Uses Business Process?'),
 ('46','Workgroup?'),
 ('47','Configuration Item?');
 
----------------------------------------------------------

INSERT INTO assessment.application_life_cycle_questions(
id, question)
VALUES ('1','Application Lifecycle'), 
('2','Sites Applications Run In'), 
('3','Primary Hardware/OS'), 
('4','Primary Development Language'),
('5','Secondary Development Language'),
('6','Primary Database Technology'),
('7','if any of the app/product is web based which web server platform(s) support it'),
('8','Frequency of Application/product Change (Enhancements/Upgrades)'),
('9','What is the Size of the change'),
('10','What tool is the Application source code storage tool'),
('11','Unique skills not commonly used at enterprise specific to this application'),
('12','What query and reporting tool(s) are used by app/product'),
('13','Do you have  a persistent test environment  readily availabile for troubleshooting/testing production applications'),
('14','Application Size (LOC, FP etc)');